// <auto-generated />
using System;
using Brewery.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Brewery.API.Database.Migrations
{
    [DbContext(typeof(BreweryContext))]
    [Migration("20230920190102_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Elia.Core.BaseModel.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tracks");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Brewery.BO.Entities.BeerEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<double>("Degree")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasIndex("MediaId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.HasIndex("OwnerId");

                    b.ToTable("Beers");
                });

            modelBuilder.Entity("Brewery.BO.Entities.ClientEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Brewery.BO.Entities.CompanyEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Vat")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Brewery.BO.Entities.MediaEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hashname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("SubDir")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Brewery.BO.Entities.OrderBeerEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BeerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderBeers");
                });

            modelBuilder.Entity("Brewery.BO.Entities.OrderEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<Guid>("WholesalerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ClientId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Brewery.BO.Entities.StockBeerWholesalerEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<Guid>("BeerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid>("WholesalerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BeerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("StockBeerWholesalers");
                });

            modelBuilder.Entity("Brewery.BO.Entities.UserEntity", b =>
                {
                    b.HasBaseType("Elia.Core.BaseModel.Track");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Brewery.BO.Entities.BreweryEntity", b =>
                {
                    b.HasBaseType("Brewery.BO.Entities.CompanyEntity");

                    b.ToTable("Breweries");
                });

            modelBuilder.Entity("Brewery.BO.Entities.WholesalerEntity", b =>
                {
                    b.HasBaseType("Brewery.BO.Entities.CompanyEntity");

                    b.ToTable("Wholesalers");
                });

            modelBuilder.Entity("Brewery.BO.Entities.BeerEntity", b =>
                {
                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.BeerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brewery.BO.Entities.MediaEntity", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brewery.BO.Entities.BreweryEntity", "Owner")
                        .WithMany("Beers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Brewery.BO.Entities.ClientEntity", b =>
                {
                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.ClientEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.BO.Entities.CompanyEntity", b =>
                {
                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.CompanyEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.BO.Entities.MediaEntity", b =>
                {
                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.MediaEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.BO.Entities.OrderBeerEntity", b =>
                {
                    b.HasOne("Brewery.BO.Entities.BeerEntity", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.OrderBeerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brewery.BO.Entities.OrderEntity", "Order")
                        .WithMany("OrderBeers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Brewery.BO.Entities.OrderEntity", b =>
                {
                    b.HasOne("Brewery.BO.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.OrderEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brewery.BO.Entities.WholesalerEntity", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("Brewery.BO.Entities.StockBeerWholesalerEntity", b =>
                {
                    b.HasOne("Brewery.BO.Entities.BeerEntity", "Beer")
                        .WithMany("StockBeerWholesalers")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.StockBeerWholesalerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brewery.BO.Entities.WholesalerEntity", "Wholesaler")
                        .WithMany()
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("Brewery.BO.Entities.UserEntity", b =>
                {
                    b.HasOne("Elia.Core.BaseModel.Track", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.UserEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.BO.Entities.BreweryEntity", b =>
                {
                    b.HasOne("Brewery.BO.Entities.CompanyEntity", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.BreweryEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.BO.Entities.WholesalerEntity", b =>
                {
                    b.HasOne("Brewery.BO.Entities.CompanyEntity", null)
                        .WithOne()
                        .HasForeignKey("Brewery.BO.Entities.WholesalerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Brewery.BO.Entities.BeerEntity", b =>
                {
                    b.Navigation("StockBeerWholesalers");
                });

            modelBuilder.Entity("Brewery.BO.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderBeers");
                });

            modelBuilder.Entity("Brewery.BO.Entities.BreweryEntity", b =>
                {
                    b.Navigation("Beers");
                });
#pragma warning restore 612, 618
        }
    }
}
