// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Brewery.API.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OrderBeerFeature : object, Xunit.IClassFixture<OrderBeerFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "OrderBeer.feature"
#line hidden
        
        public OrderBeerFeature(OrderBeerFeature.FixtureData fixtureData, Brewery_API_Spec_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Order Beer", "\tThis feature allow you to manage beer orders", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="1- Successfully add the sale of a beer to a wholesaler")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "1- Successfully add the sale of a beer to a wholesaler")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"Leffe Blonde\"; \"Count\": 2};{\"Name\": \"Beer 2\"; \"Count\": 5};{\"Name\": \"Be" +
            "er 3\"; \"Count\": 1}]", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"02d9c7d4-bd3b-4229-8153-4924870c3cb6\"; \"Count\": 3};{\"Name\": \"03d9c7d4-" +
            "bd3b-4229-8153-4924870c3cb6\"; \"Count\": 10}]", new string[0])]
        public virtual void _1_SuccessfullyAddTheSaleOfABeerToAWholesaler(string clientId, string wholesalerId, string beers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            argumentsOfScenario.Add("beers", beers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("1- Successfully add the sale of a beer to a wholesaler", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given(string.Format("The user fills in the requested information ({0}, {1}, {2})", clientId, wholesalerId, beers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.When("User submit the form wholesaler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("The beer is Sold with status code success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("An invoice is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="2- Error try to add the sale of a beer to a wholesaler with empty order")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "2- Error try to add the sale of a beer to a wholesaler with empty order")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", new string[0])]
        [Xunit.InlineDataAttribute("08d9c4d4-bd3b-4129-8153-4924870c9cb9", "08d9c2d4-bd3b-4129-8153-4924870c9cb2", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb3", new string[0])]
        public virtual void _2_ErrorTryToAddTheSaleOfABeerToAWholesalerWithEmptyOrder(string clientId, string wholesalerId, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("2- Error try to add the sale of a beer to a wholesaler with empty order", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given(string.Format("The user fills incorrectly requested information ({0}, {1})", clientId, wholesalerId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When("He submit the form wholesaler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("The server answer to status code BadParams", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.And("The reason is Order cannot be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="3- Error try to add duplicate order the sale of a beer to a wholesaler")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "3- Error try to add duplicate order the sale of a beer to a wholesaler")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"Leffe Blonde\"; \"Count\": 2};{\"Name\": \"Beer 2\"; \"Count\": 5};{\"Name\": \"Be" +
            "er 2\"; \"Count\": 2};{\"Name\": \"Beer 3\"; \"Count\": 13}]", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"02d9c7d4-bd3b-4229-8153-4924870c3cb6\"; \"Count\": 3};{\"Name\": \"03d9c7d4-" +
            "bd3b-4229-8153-4924870c3cb6\"; \"Count\": 103};{\"Name\": \"02d9c7d4-bd3b-4229-8153-49" +
            "24870c3cb6\"; \"Count\": 1}]", new string[0])]
        public virtual void _3_ErrorTryToAddDuplicateOrderTheSaleOfABeerToAWholesaler(string clientId, string wholesalerId, string beers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            argumentsOfScenario.Add("beers", beers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("3- Error try to add duplicate order the sale of a beer to a wholesaler", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("The user fills in the requested information with duplicate order ({0}, {1}, {2})", clientId, wholesalerId, beers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When("He submit the form wholesaler with duplicate order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then("The server return to status code BadParams", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("The reason There cannot be a duplicate in the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="4- Error try to add  the sale of a beer not exist to a wholesaler")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "4- Error try to add  the sale of a beer not exist to a wholesaler")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"Leffe Blondes\"; \"Count\": 2};{\"Name\": \"Beer 22\"; \"Count\": 5};{\"Name\": \"" +
            "Beer 33\"; \"Count\": 1}]", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"02d9c7d4-bd3b-4029-8153-4924870c3cb6\"; \"Count\": 3};{\"Name\": \"03d9c0d4-" +
            "bd3b-4229-8153-4924870c3cb6\"; \"Count\": 103}]", new string[0])]
        public virtual void _4_ErrorTryToAddTheSaleOfABeerNotExistToAWholesaler(string clientId, string wholesalerId, string beers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            argumentsOfScenario.Add("beers", beers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("4- Error try to add  the sale of a beer not exist to a wholesaler", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given(string.Format("The user fills in the requested information with not exist beer ({0}, {1}, {2})", clientId, wholesalerId, beers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When("He submit the form wholesaler with not exist beer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("The server return to status code BadParams because the beer does\'t exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.And("The reason is The beer (xxx) must be sold by the wholesaler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="5- Error try to add  the sale of a beer not exist stock to a wholesaler")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "5- Error try to add  the sale of a beer not exist stock to a wholesaler")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"Leffe Blonde\"; \"Count\": 230};{\"Name\": \"Beer 2\"; \"Count\": 500};{\"Name\":" +
            " \"Beer 3\"; \"Count\": 1000}]", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"02d9c7d4-bd3b-4229-8153-4924870c3cb6\"; \"Count\": 3120};{\"Name\": \"03d9c7" +
            "d4-bd3b-4229-8153-4924870c3cb6\"; \"Count\": 1030}]", new string[0])]
        public virtual void _5_ErrorTryToAddTheSaleOfABeerNotExistStockToAWholesaler(string clientId, string wholesalerId, string beers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            argumentsOfScenario.Add("beers", beers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("5- Error try to add  the sale of a beer not exist stock to a wholesaler", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given(string.Format("The user fills in the requested information with not exist stock beer ({0}, {1}, " +
                            "{2})", clientId, wholesalerId, beers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.When("He submit the form wholesaler with not exist stock beer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("The server return to status code BadParams because the beer does\'t exist stock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And("The reason is The number of beers (xxx) ordered must not exceed the wholesaler\'s " +
                        "stock", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="6- Error try to add  the sale of a beer to a non exist wholesaler")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "6- Error try to add  the sale of a beer to a non exist wholesaler")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9ca1", "[{\"Name\": \"Leffe Blonde\"; \"Count\": 2};{\"Name\": \"Beer 2\"; \"Count\": 5};{\"Name\": \"Be" +
            "er 3\"; \"Count\": 1}]", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9cb7", "08d9c2d4-bd3b-4129-8153-4924870c9cd1", "[{\"Name\": \"02d9c7d4-bd3b-4229-8153-4924870c3cb6\"; \"Count\": 3};{\"Name\": \"03d9c7d4-" +
            "bd3b-4229-8153-4924870c3cb6\"; \"Count\": 103}]", new string[0])]
        public virtual void _6_ErrorTryToAddTheSaleOfABeerToANonExistWholesaler(string clientId, string wholesalerId, string beers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            argumentsOfScenario.Add("beers", beers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("6- Error try to add  the sale of a beer to a non exist wholesaler", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
 testRunner.Given(string.Format("The user fills in the requested information with non exist wholesaler ({0}, {1}, " +
                            "{2})", clientId, wholesalerId, beers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 72
 testRunner.When("He submit the form wholesaler with non exist wholesaler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("The server return to status code BadParams becuase non exist wholesaler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.And("The reason is The wholesaler must exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="7- Error try to add  the sale of a beer to a wholesaler with non exist client")]
        [Xunit.TraitAttribute("FeatureTitle", "Order Beer")]
        [Xunit.TraitAttribute("Description", "7- Error try to add  the sale of a beer to a wholesaler with non exist client")]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9ab7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"Leffe Blonde\"; \"Count\": 2};{\"Name\": \"Beer 2\"; \"Count\": 1};{\"Name\": \"Be" +
            "er 3\"; \"Count\": 1}]", new string[0])]
        [Xunit.InlineDataAttribute("08d9c1d4-bd3b-4129-8153-4924870c9db7", "08d9c2d4-bd3b-4129-8153-4924870c9cb1", "[{\"Name\": \"02d9c7d4-bd3b-4229-8153-4924870c3cb6\"; \"Count\": 1};{\"Name\": \"03d9c7d4-" +
            "bd3b-4229-8153-4924870c3cb6\"; \"Count\": 1}]", new string[0])]
        public virtual void _7_ErrorTryToAddTheSaleOfABeerToAWholesalerWithNonExistClient(string clientId, string wholesalerId, string beers, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clientId", clientId);
            argumentsOfScenario.Add("wholesalerId", wholesalerId);
            argumentsOfScenario.Add("beers", beers);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("7- Error try to add  the sale of a beer to a wholesaler with non exist client", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 85
 testRunner.Given(string.Format("The user fills in the requested information with non exist client ({0}, {1}, {2})" +
                            "", clientId, wholesalerId, beers), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
 testRunner.When("He submit the form wholesaler with non exist client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
 testRunner.Then("The server return to status code BadParams becuase non exist client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.And("The reason is The client must exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrderBeerFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrderBeerFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
