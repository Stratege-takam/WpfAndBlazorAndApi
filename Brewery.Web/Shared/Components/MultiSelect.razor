@using Brewery.Web.Helpers.ViewModels

<Dropdown Class="multiselect">
    <DropdownToggleButton Color="ButtonColor.None"
                          Class="text-wrap">
         @Display
    </DropdownToggleButton>
    <DropdownMenu>
        @if (Items != null)
        {
            foreach (var item in Items)
            {
                var elt = item;
                <DropdownItem Type="ButtonType.Link">
                    <Switch Value="elt.Checked"
                            ValueExpression="() => elt.Checked" 
                            ValueChanged=" (b) =>  UpdateDisplay(elt, b)" 
                            Label="@elt.Value"/>
                </DropdownItem>
            }
        }
    </DropdownMenu>
</Dropdown>

@code {

    private string _item;
    
    [Parameter]
    public string Item { 
        get => _item;
        set
        {
            if (_item != value)
            {
                _item = value;
                ItemChanged.InvokeAsync(value);
            }
        } 
    }
    
    [Parameter]
    public EventCallback<string> ItemChanged { get; set; }


    private List<KeyValueViewModel> _items;
    
    [Parameter]
    public List<KeyValueViewModel> Items { 
        get => _items;
        set
        {
            if (_items != value)
            {
                _items = value;
                Display = string.Join(",", _items.Where(item => item.Checked).Select(item => item.Value.ToString()));
                Item = string.Join(",", _items.Where(item => item.Checked).Select(item => item.Key.ToString()));
            }
        } 
    }

    private string Display { get; set; }


    protected override void OnParametersSet()
    {
        if (Item != null && Items != null)
        {
            var items = Item.Split(",");
            Items = Items.Select(item =>
            {
                if (items.Any(i => i == (string)item.Key))
                {
                    item.Checked = true;
                }
                return item;
            }).ToList();
        }
    }

    private void UpdateDisplay(KeyValueViewModel keyValueViewModel, bool currentValue)
    {
        Items = Items.Select(item =>
        {
            if (item.Key == keyValueViewModel.Key)
            {
                item.Checked = currentValue;
            }
            return item;
        }).ToList();
    }
}